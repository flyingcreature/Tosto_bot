import telebot, logging, time, random, json

import db
from config import (
    LOGS_PATH,
    BOT_TOKEN,
    ADMINS,
    MAX_USER_GPT_TOKENS,
    DB_TABLE_USERS_NAME,
)
from iop import IOP, Monetize

io = IOP()
mt = Monetize()

logging.basicConfig(
    filename=LOGS_PATH,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filemode="w",
)

bot = telebot.TeleBot(BOT_TOKEN)


@bot.message_handler(commands=["emergency_stop"])
def emergency_stop(message: telebot.types.Message):
    if message.from_user.id in ADMINS:
        for user in ADMINS:
            bot.send_chat_action(user, "typing")
            bot.send_message(user, "Emergency stop activated")
        logging.warning("Emergency stop activated")
        exit(0)


@bot.message_handler(commands=["start"])
def start(message: telebot.types.Message):
    bot.send_chat_action(message.chat.id, "typing")
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Çüëãüèø! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–¥—É–º—ã–≤–∞–Ω–∏—è —Ç–æ—Å—Ç–æ–≤ –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–πüìù."
        "\n\n–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –¥–∞–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É, —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞–µ–º /gen üí•"
    )
    io.sing_up(message.from_user.id, message.from_user.first_name)


@bot.message_handler(commands=["help"])
def help(message: telebot.types.Message):
    bot.send_chat_action(message.chat.id, "typing")
    bot.send_message(
        message.chat.id,
        "–ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Å—Ç, –Ω–∞–ø–∏—à–∏ /gen üñäÔ∏è\n\n –ß—Ç–æ–±—ã —É–≤–∏–¥–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã–π —Ç–æ—Å—Ç –Ω–∞–ø–∏—à–∏—Ç–µ /last üìÉ"
        "\n\n–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é - /menu üì≤\n\nüëàP.S. –í—Å–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–Ω—ã –≤ —Å–ø–∏—Å–∫–µ —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞."
        "\nP.S.#2 –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞ —Ç–æ—Å—Ç == –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ üéâ",
    )


@bot.message_handler(commands=["gen"])
def generate(message: telebot.types.Message):
    bot.send_chat_action(message.chat.id, "typing")

    if (
            db.get_user_data(DB_TABLE_USERS_NAME, message.from_user.id)["gpt_tokens"]
            >= MAX_USER_GPT_TOKENS
    ):
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Å—Ç–∞ üôÅ\n"
            "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é, –∞ –ø–æ–∫–∞ –ª–æ–≤–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ üòä",
        )
        bot.send_chat_action(message.chat.id, "typing")
        with open("offline.json", "r", encoding="utf-8") as f:
            offline_toasts = json.load(f)
            bot.send_message(message.chat.id, random.choice(offline_toasts))
            return

    bot.send_message(
        message.chat.id,
        "–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø—Ä–∏–¥—É–º–∞–µ–º —Ç–æ—Å—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–≥–æ –º—ã –±—É–¥–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª—è—Ç—å ü•≥?(–ú–æ–∂–Ω–æ –∏–º—è))",
    )
    bot.register_next_step_handler(message, name_name)


def name_name(message: telebot.types.Message):
    io.updd_pgen(message.from_user.id, None, message.text, time.time())
    bot.send_chat_action(message.chat.id, "typing")
    bot.send_message(
        message.chat.id, "–¢–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å —Ç–æ—Å—Ç üé≠"
    )
    bot.register_next_step_handler(message, event_event)


def event_event(message: telebot.types.Message):
    io.updd_pgen(message.from_user.id, message.text, None, time.time())
    bot.send_chat_action(message.chat.id, "typing")
    bot.send_message(
        message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–ª–∏–Ω—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö üìè"
    )
    bot.register_next_step_handler(message, long_long)


def long_long(message: telebot.types.Message):
    if message.text.isdigit():
        db.update_row(
            DB_TABLE_USERS_NAME,
            message.from_user.id,
            "long_congratulation",
            int(message.text),
        )
        name_event(message)


def name_event(message: telebot.types.Message):
    bot.send_chat_action(message.chat.id, "typing")
    result = io.generate(message.from_user.id, message.from_user.first_name)

    if result == "cd_error":
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Å—Ç–∞ üôÅ\n–õ–æ–≤–∏ —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ—Å—Ç üòä:",
        )
        bot.send_chat_action(message.chat.id, "typing")
        with open("offline.json", "r", encoding="utf-8") as f:
            offline_toasts = json.load(f)
        bot.send_message(message.chat.id, random.choice(offline_toasts))

    bot.send_chat_action(message.chat.id, "typing")
    bot.send_message(message.chat.id, result)


@bot.message_handler(commands=["last"])
def last(message: telebot.types.Message):
    txt = db.select_n_last_messages(message.chat.id)
    bot.send_chat_action(message.chat.id, "typing")
    bot.send_message(
        message.chat.id,
        f"–í–æ—Ç –≤–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚úâÔ∏è:\n\n{txt}",
        reply_markup=telebot.util.quick_markup({"–ú–µ–Ω—é": {"callback_data": "menu"}}),
    )


@bot.callback_query_handler(func=lambda call: call.data == "menu")
@bot.message_handler(commands=["menu"])
def menu(call):
    message: telebot.types.Message = (
        call.message
        if hasattr(call, "message")
        else call.message if isinstance(call, telebot.types.CallbackQuery) else call
    )

    if message is not None:
        try:
            bot.edit_message_reply_markup(message.chat.id, message.message_id)
        except telebot.apihelper.ApiTelegramException:
            pass
        bot.send_chat_action(message.chat.id, "typing")
        bot.send_message(
            message.chat.id,
            "–ú–µ–Ω—é:",
            reply_markup=io.get_inline_keyboard(
                (("–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "myb"), ("–ü–æ–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç", "debt"))
            ),
        )


@bot.callback_query_handler(func=lambda call: call.data == "debt")
def get_debt(call):
    message: telebot.types.Message = (
        call.message if call.message else call.callback_query.message
    )
    bot.delete_message(message.chat.id, message.message_id)
    gpt = round(mt.cost_calculation(message.chat.id, "gpt"), 2)
    bot.send_message(
        message.chat.id,
        f"–í–æ—Ç –≤–∞—à —Å—á–µ—Ç üí∞:\n\n" f"–ó–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ YaGPT: {gpt}‚ÇΩ",
        reply_markup=telebot.util.quick_markup({"–ú–µ–Ω—é": {"callback_data": "menu"}})
    )


@bot.message_handler(commands=["logs"])
def send_logs(message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        try:
            with open(LOGS_PATH, "rb") as f:
                bot.send_document(message.chat.id, f)
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(chat_id=message.chat.id, text="–õ–æ–≥–æ–≤ –Ω–µ—Ç!")
    else:
        print(f"{user_id} –∑–∞—Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")
        logging.info(f"{user_id} –∑–∞—Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")


@bot.message_handler(content_types=["text"])
def text(message: telebot.types.Message):
    bot.send_chat_action(message.chat.id, "typing")
    bot.send_message(
        message.chat.id,
        "–ö–∞–∂–µ—Ç—Å—è —è –ø–æ—Ç–µ—Ä—è–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç :(\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ üîÑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é üì≤",
    )


bot.infinity_polling(timeout=60, long_polling_timeout=5)
